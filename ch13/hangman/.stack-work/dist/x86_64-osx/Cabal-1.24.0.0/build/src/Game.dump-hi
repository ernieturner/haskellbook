
==================== FINAL INTERFACE ====================
2017-02-01 05:39:49.278557 UTC

interface hangman-0.1.0.0-CcXPL4z5XJ16AKbxhRZoP9:Game 8001
  interface hash: 7a8a3c0729475d4d1edbe7388e1b8791
  ABI hash: 431140d6af3c872770a413760394a77e
  export-list hash: b869626683ca9745edf3ae1b44898318
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: a4046e0fdab24403354cf30558c1ea1c
  sig of: Nothing
  used TH splices: False
  where
exports:
  Game.freshPuzzle
  Game.runGame
module dependencies: PuzzleType
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Control.Monad 7767aebfd53f0b584cef2fe66ad3986c
import  -/  base-4.9.0.0:Data.Char eb33dc25ecb52d018a0ca26590e2b50b
import  -/  base-4.9.0.0:Data.Foldable 8aeb682f6c74f97fcf0ace0d608a43ea
import  -/  base-4.9.0.0:Data.Maybe 5f2ba364cbe65c060bc5436bc0b9d049
import  -/  base-4.9.0.0:GHC.Base 8ed3be81c0707b322f975a84ae1bb816
import  -/  base-4.9.0.0:GHC.List 13d2451194c1c6e53b4f4f07947736dd
import  -/  base-4.9.0.0:GHC.Num 48f506a8f4ecf06285d0a0706594dcc0
import  -/  base-4.9.0.0:GHC.Show 952347a6ab730bcb25c0854d8bc6ca51
import  -/  base-4.9.0.0:GHC.Unicode 2343b0871604cc5116abba8f24d75b42
import  -/  base-4.9.0.0:Prelude b9bddb97799837fe67a8d00939a5b6c3
import  -/  base-4.9.0.0:System.Exit 4df7be78e54bbe200276120bd44e7e2a
import  -/  base-4.9.0.0:System.IO ad985d7a3fc986e9b9c610fb344d9106
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  PuzzleType 2d9e47da185ac721af5968bdf65b9729
  exports: 8d332e19d44b14a8f1fe84e1146b4e7f
  Puzzle ee49dcc7bbdd4fded52f50a07da25697
  Puzzle c1dd6480eb3e4c8cffcbdb80d6bf144f
7ad23033feb695c6756dafc49b37f6b6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Game.$trModule2 Game.$trModule1) -}
3cccb606a8d8c880c484ea32d1dd9f42
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Game"#) -}
fdb862e94502a95a1e4dd74f0f3faa9b
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "hangman-0.1.0.0-CcXPL4z5XJ16AKbxhRZoP9"#) -}
d03427825938b4ec0e5b8ea9722b1adf
  $wrunGame ::
    GHC.Base.String
    -> [GHC.Base.Maybe GHC.Types.Char]
    -> [GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 4, Strictness: <L,U><S,U><L,U><S,U>, Inline: [0] -}
a3d4b1e2344405242d8a6c58ebb0bcdc
  freshPuzzle :: GHC.Base.String -> PuzzleType.Puzzle
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (word :: GHC.Base.String) ->
                 PuzzleType.Puzzle
                   word
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Game.freshPuzzle1)
                         n
                         word))
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0e6fb0329c25ec208cdc99ac5dfc86b5
  freshPuzzle1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: GHC.Types.Char) -> GHC.Base.Nothing @ GHC.Types.Char) -}
3ed8bdfe39f2692f4845d1e3e42a0312
  runGame :: PuzzleType.Puzzle -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <S(LSL),U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Game.runGame1
                  `cast`
                (<PuzzleType.Puzzle>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7f3cb6d042b24f68fddc0e190a28d63b
  runGame1 ::
    PuzzleType.Puzzle
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S(LSL),U(U,U,U)><S,U>, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: PuzzleType.Puzzle)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { PuzzleType.Puzzle ww1 ww2 ww3 ->
                 Game.$wrunGame ww1 ww2 ww3 w1 }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

